abstract type AbstractDensity end

@inline DensityKind(::AbstractDensity) = IsDensity()

"""
    struct Density{M,B}
        Œº::M
        base::B
    end

For measures Œº and ŒΩ with Œº‚â™ŒΩ, the density of Œº with respect to ŒΩ (also called
the Radon-Nikodym derivative dŒº/dŒΩ) is a function f defined on the support of ŒΩ
with the property that for any measurable a ‚äÇ supp(ŒΩ), Œº(a) = ‚à´‚Çê f dŒΩ.
    
Because this function is often difficult to express in closed form, there are
many different ways of computing it. We therefore provide a formal
representation to allow comptuational flexibilty.
"""
struct Density{M,B} <: AbstractDensity
    Œº::M
    base::B
end

export ùíπ

"""
    ùíπ(Œº::AbstractMeasure, base::AbstractMeasure)

Compute the Radom-Nikodym derivative of Œº with respect to `base`.
"""
function ùíπ(Œº::AbstractMeasure, base::AbstractMeasure)
    return Density(Œº, base)
end

logdensityof(d::Density, x) = logdensity_rel(d.Œº, d.base, x)

logdensity_def(d::Density, x) = logdensityof(d, x)

"""
    struct DensityMeasure{F,B} <: AbstractMeasure
        density :: F
        base    :: B
    end

A `DensityMeasure` is a measure defined by a density with respect to some other
"base" measure 
"""
struct DensityMeasure{F,B} <: AbstractMeasure
    f::F
    base::B
end

function Pretty.tile(Œº::DensityMeasure{F,B}) where {F,B}
    result = Pretty.literal("DensityMeasure ‚à´(")
    result *= Pretty.pair_layout(Pretty.tile(Œº.f), Pretty.tile(Œº.base); sep = ", ")
    result *= Pretty.literal(")")
end

densitymeasure(f, base) = _densitymeasure(f, base, DensityKind(f))

_densitymeasure(f, base, ::IsDensity) = DensityMeasure(f, base)

function _densitymeasure(f, base, _)
    @error """
    The first argument of `DensityMeasure`" must be `::IsDensity`. To pass a
    function, first wrap it in `DensityInterface.funcdensity` or
    `DensityInterface.logfuncdensity`. 
    """
end

@inline function insupport(d::DensityMeasure, x)
    ifelse(insupport(d.base, x), logdensityof(d.f, x) > -Inf, false)
end

basemeasure(Œº::DensityMeasure) = Œº.base

logdensity_def(Œº::DensityMeasure, x) = logdensityof(Œº.f, x)

density_def(Œº::DensityMeasure, x) = densityof(Œº.f, x)


export ‚à´

"""
    ‚à´(f, base::AbstractMeasure)

Define a new measure in terms of a density `f` over some measure `base`.
"""
‚à´(f::Function, base::AbstractMeasure) = DensityMeasure(funcdensity(f), base)

‚à´(f, base::AbstractMeasure) = _densitymeasure(f, base, DensityKind(f))

# ‚à´(Œº::AbstractMeasure, base::AbstractMeasure) = ‚à´(ùíπ(Œº, base), base)

export ‚à´exp

"""
    ‚à´exp(f, base::AbstractMeasure)

Define a new measure in terms of a log-density `f` over some measure `base`.
"""
‚à´exp(f::Function, Œº) = ‚à´(logfuncdensity(f), Œº)

# TODO: `density` and `logdensity` functions for `DensityMeasure`

"""
    logdensityof(m::AbstractMeasure, x) 

Compute the log-density of the measure `m` at `x`. Density is always relative,
but `DensityInterface.jl` does not account for this. For compatibility with
this, `logdensityof` for a measure is always implicitly relative to
[`rootmeasure(x)`](@ref rootmeasure). 

`logdensityof` works by first computing `insupport(m, x)`. If this is true, then
`unsafe_logdensityof` is called. If `insupport(m, x)` is known to be `true`, it
can be a little faster to directly call `unsafe_logdensityof(m, x)`. 

To compute log-density relative to `basemeasure(m)` or *define* a log-density
(relative to `basemeasure(m)` or another measure given explicitly), see
`logdensity_def`. 

To compute a log-density relative to a specific base-measure, see
`logdensity_rel`. 
"""
@inline function logdensityof(Œº::AbstractMeasure, x)
    t() = dynamic(unsafe_logdensityof(Œº, x))
    f() = -Inf
    ifelse(insupport(Œº, x), t, f)()
end

export unsafe_logdensityof

# https://discourse.julialang.org/t/counting-iterations-to-a-type-fixpoint/75876/10?u=cscherrer
"""
    unsafe_logdensityof(m, x)

Compute the log-density of the measure `m` at `x` relative to `rootmeasure(m)`.
This is "unsafe" because it does not check `insupport(m, x)`.

See also `logdensityof`.
"""
@inline function unsafe_logdensityof(Œº::M, x) where {M}
    ‚Ñì_0 = logdensity_def(Œº, x)
    b_0 = Œº
    Base.Cartesian.@nexprs 10 i -> begin  # 10 is just some "big enough" number
        b_{i} = basemeasure(b_{i-1}, x)
        if b_{i} isa typeof(b_{i-1})
            return ‚Ñì_{i-1}
        end
        ‚Ñì_{i} = let Œî‚Ñì_{i} = logdensity_def(b_{i}, x)
            ‚Ñì_{i-1} + Œî‚Ñì_{i}
        end
    end
    return ‚Ñì_10
end

export density_rel

@inline density_rel(Œº, ŒΩ, x) = exp(logdensity_rel(Œº, ŒΩ, x))

export logdensity_rel

@inline return_type(f, args::Tuple) = Core.Compiler.return_type(f, Tuple{typeof.(args)...})

unstatic(::Type{T}) where {T} = T
unstatic(::Type{StaticFloat64{X}}) where X = Float64

"""
    logdensity_rel(m1, m2, x)

Compute the log-density of `m1` relative to `m2` at `x`. This function checks
whether `x` is in the support of `m1` or `m2` (or both, or neither). If `x` is
known to be in the support of both, it can be more efficient to call
`unsafe_logdensity_rel`. 
"""
@inline function logdensity_rel(Œº::M, ŒΩ::N, x::X) where {M,N,X}
    T = unstatic(promote_type(return_type(logdensity_def, (Œº, x)), return_type(logdensity_def, (ŒΩ, x))))
    inŒº = insupport(Œº, x)
    inŒΩ = insupport(ŒΩ, x)
    inŒº || return convert(T, ifelse(inŒΩ, -Inf, NaN))
    inŒΩ || return convert(T, Inf)

    return unsafe_logdensity_rel(Œº, ŒΩ, x)
end

"""
    unsafe_logdensity_rel(m1, m2, x)

Compute the log-density of `m1` relative to `m2` at `x`, assuming `x` is
known to be in the support of both `m1` and `m2`.

See also `logdensity_rel`.
"""
@inline function unsafe_logdensity_rel(Œº::M, ŒΩ::N, x::X) where {M,N,X}
    if static_hasmethod(logdensity_def, Tuple{M, N, X})
        return logdensity_def(Œº, ŒΩ, x)
    end
    Œºs = basemeasure_sequence(Œº)
    ŒΩs = basemeasure_sequence(ŒΩ)
    cb = commonbase(Œºs, ŒΩs, X)
    # _logdensity_rel(Œº, ŒΩ)
    isnothing(cb) && begin
        Œº = Œºs[end]
        ŒΩ = ŒΩs[end]
        @warn """
        No common base measure for
            $Œº
        and
            $ŒΩ

        Returning a relative log-density of NaN. If this is incorrect, add a
        three-argument method
            logdensity_def($Œº, $ŒΩ, x)
        """
        return NaN
    end
    return _logdensity_rel(Œºs, ŒΩs, cb, x)
end

# Note that this method assumes `Œº` and `ŒΩ` to have the same type
function logdensity_def(Œº::T, ŒΩ::T, x) where {T}
    if Œº === ŒΩ
        return zero(return_type(logdensity_def, (Œº, x)))
    else
        return logdensity_def(Œº,x) - logdensity_def(ŒΩ, x)
    end
end

@generated function _logdensity_rel(Œºs::TŒº, ŒΩs::TŒΩ, ::Tuple{StaticInt{M},StaticInt{N}}, x::X)  where {TŒº, TŒΩ,M,N,X}
    sŒº = schema(TŒº)
    sŒΩ = schema(TŒΩ)
   
    q = quote 
        $(Expr(:meta, :inline))
        ‚Ñì = logdensity_def(Œºs[$M], ŒΩs[$N], x)
    end
    
    for i in 1:M-1
        push!(q.args, :(Œî‚Ñì = logdensity_def(Œºs[$i], x)))
        # push!(q.args, :(println("Adding", Œî‚Ñì)))
        push!(q.args, :(‚Ñì += Œî‚Ñì))
    end

    for j in 1:N-1
        push!(q.args, :(Œî‚Ñì = logdensity_def(ŒΩs[$j], x)))
        # push!(q.args, :(println("Subtracting", Œî‚Ñì)))
        push!(q.args, :(‚Ñì -= Œî‚Ñì))
    end

    push!(q.args, :(return ‚Ñì))
    return q
end

export densityof
export logdensityof

export density_def

density_def(Œº, ŒΩ::AbstractMeasure, x) = exp(logdensity_def(Œº, ŒΩ, x))
density_def(Œº, x) = exp(logdensity_def(Œº, x))

"""
    rebase(Œº, ŒΩ)

Express `Œº` in terms of a density over `ŒΩ`. Satisfies
```
basemeasure(rebase(Œº, ŒΩ)) == ŒΩ
density(rebase(Œº, ŒΩ)) == ùíπ(Œº,ŒΩ)
``` 
"""
rebase(Œº, ŒΩ) = ‚à´(ùíπ(Œº,ŒΩ), ŒΩ)