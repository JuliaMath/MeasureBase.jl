abstract type AbstractDensity end

@inline DensityKind(::AbstractDensity) = IsDensity()

"""
    struct Density{M,B}
        Œº::M
        base::B
    end

For measures Œº and ŒΩ with Œº‚â™ŒΩ, the density of Œº with respect to ŒΩ (also called
the Radon-Nikodym derivative dŒº/dŒΩ) is a function f defined on the support of ŒΩ
with the property that for any measurable a ‚äÇ supp(ŒΩ), Œº(a) = ‚à´‚Çê f dŒΩ.
    
Because this function is often difficult to express in closed form, there are
many different ways of computing it. We therefore provide a formal
representation to allow comptuational flexibilty.
"""
struct Density{M,B} <: AbstractDensity
    Œº::M
    base::B
end

export ùíπ

"""
    ùíπ(Œº::AbstractMeasure, base::AbstractMeasure)

Compute the Radom-Nikodym derivative of Œº with respect to `base`.
"""
function ùíπ(Œº::AbstractMeasure, base::AbstractMeasure)
    return Density(Œº, base)
end

logdensityof(d::Density, x) = logdensityof(d.Œº, d.base, x)

logdensityof(d::Density, x) = exp(logdensityof(d.Œº, d.base, x))


"""
    struct DensityMeasure{F,B} <: AbstractMeasure
        density :: F
        base    :: B
    end

A `DensityMeasure` is a measure defined by a density with respect to some other
"base" measure 
"""
struct DensityMeasure{F,B} <: AbstractMeasure
    f::F
    base::B
end

function Pretty.tile(Œº::DensityMeasure{F,B}) where {F,B}
    result = Pretty.literal("DensityMeasure ‚à´(")
    result *= Pretty.pair_layout(Pretty.tile(Œº.f), Pretty.tile(Œº.base); sep = ", ")
    result *= Pretty.literal(")")
end

densitymeasure(f, base) = _densitymeasure(f, base, DensityKind(f))

_densitymeasure(f, base, ::IsDensity) = DensityMeasure(f, base)

function _densitymeasure(f, base, _)
    @error """
    The first argument of `DensityMeasure`" must be `::IsDensity`. To pass a
    function, first wrap it in `DensityInterface.funcdensity` or
    `DensityInterface.logfuncdensity`. 
    """
end

basemeasure(Œº::DensityMeasure) = Œº.base

basemeasure_type(::Type{DensityMeasure{F,B}}) where {F,B} = B

logdensity_def(Œº::DensityMeasure, x) = logdensityof(Œº.f, x)

density_def(Œº::DensityMeasure, x) = densityof(Œº.f, x)

densityof(Œº::AbstractMeasure, ŒΩ::AbstractMeasure, x) = exp(logdensityof(Œº, ŒΩ, x))

export ‚à´

"""
    ‚à´(f, base::AbstractMeasure)

Define a new measure in terms of a density `f` over some measure `base`.
"""
‚à´(f::Function, base::AbstractMeasure) = DensityMeasure(funcdensity(f), base)

‚à´(f, base::AbstractMeasure) = _densitymeasure(f, base, DensityKind(f))

# ‚à´(Œº::AbstractMeasure, base::AbstractMeasure) = ‚à´(ùíπ(Œº, base), base)

export ‚à´exp

"""
    ‚à´exp(f, base::AbstractMeasure)

Define a new measure in terms of a log-density `f` over some measure `base`.
"""
‚à´exp(f::Function, Œº) = ‚à´(logfuncdensity(f), Œº)

# TODO: `density` and `logdensity` functions for `DensityMeasure`

@inline function logdensityof(Œº::T, ŒΩ::T, x) where {T<:AbstractMeasure}
    Œº == ŒΩ && return 0.0
    invoke(logdensityof, Tuple{AbstractMeasure,AbstractMeasure,typeof(x)}, Œº, ŒΩ, x)
end

@inline function logdensityof(Œº::AbstractMeasure, ŒΩ::AbstractMeasure, x)
    Œ± = basemeasure(Œº)
    Œ≤ = basemeasure(ŒΩ)

    # If Œ±===Œº and Œ≤===ŒΩ, The recursive call would be exactly the same as the
    # original one. We need to break the recursion.
    if Œ± === Œº && Œ≤ === ŒΩ
        @warn """
        No method found for logdensity_def(Œº, ŒΩ, x) where
        typeof(Œº) == $(typeof(Œº))
        typeof(ŒΩ) == $(typeof(ŒΩ))

        Returning NaN. If this is incorrect, please add a method        
        logdensity_def(Œº::$(typeof(Œº)), ŒΩ::$(typeof(ŒΩ)), x)
        """
        return NaN
    end

    # Infinite or NaN results occur when outside the support of Œ± or Œ≤, 
    # and also when one measure is singular wrt the other. Computing the base
    # measures first is often much cheaper, and allows the numerically-intensive
    # computation to "fall through" in these cases.
    # TODO: Add tests to check that NaN cases work properly
    ‚Ñì = logdensityof(Œ±, Œ≤, x)
    isnan(‚Ñì) && return ‚Ñì

    ‚Ñì += logdensity_def(Œº, x)
    ‚Ñì -= logdensity_def(ŒΩ, x)

    return ‚Ñì
end

@inline logdensityof(Œº, x) = first(_logdensityof(Œº, x))

# Because it's sometimes useful, this returns a pair (‚Ñì,r) where
# ‚Ä¢ ‚Ñì is the log-density
# ‚Ä¢ r is the rootmeasure of Œº
@inline function _logdensityof(Œº, x)
    n = basemeasure_depth(proxy(Œº)) - static(1)
    
    Œ≤ = basemeasure(Œº, x)
    ‚Ñì = logdensity_def(Œº, x)
    return _logdensityof(Œ≤, x, ‚Ñì, n)
end

@generated function _logdensityof(Œº, x, ‚Ñì, ::StaticInt{n}) where {n}
    nsteps = max(n, 0)
    quote
        $(Expr(:meta, :inline))
        Base.Cartesian.@nexprs $nsteps i -> begin
            Œî‚Ñì = logdensity_def(Œº, x)
            Œº = basemeasure(Œº, x)
            ‚Ñì += Œî‚Ñì
        end
        return (‚Ñì,Œº)
    end
end

# logdensity_def(::Lebesgue{‚Ñù}, ::Lebesgue{‚Ñù}, x) = zero(x)

export densityof
export logdensityof

export density_def


density_def(Œº, ŒΩ::AbstractMeasure, x) = exp(logdensity_def(Œº, ŒΩ, x))

density_def(Œº, x) = exp(logdensity_def(Œº, x))
