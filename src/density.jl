abstract type AbstractDensity end

@inline DensityKind(::AbstractDensity) = IsDensity()

"""
    struct Density{M,B}
        Œº::M
        base::B
    end

For measures Œº and ŒΩ with Œº‚â™ŒΩ, the density of Œº with respect to ŒΩ (also called
the Radon-Nikodym derivative dŒº/dŒΩ) is a function f defined on the support of ŒΩ
with the property that for any measurable a ‚äÇ supp(ŒΩ), Œº(a) = ‚à´‚Çê f dŒΩ.
    
Because this function is often difficult to express in closed form, there are
many different ways of computing it. We therefore provide a formal
representation to allow comptuational flexibilty.
"""
struct Density{M,B} <: AbstractDensity
    Œº::M
    base::B
end

export ùíπ

"""
    ùíπ(Œº::AbstractMeasure, base::AbstractMeasure)

Compute the Radom-Nikodym derivative of Œº with respect to `base`.
"""
function ùíπ(Œº::AbstractMeasure, base::AbstractMeasure)
    return Density(Œº, base)
end

logdensityof(d::Density, x) = logdensityof(d.Œº, x) - logdensityof(d.base, x)

logdensity_def(d::Density, x) = logdensityof(d, x)

"""
    struct DensityMeasure{F,B} <: AbstractMeasure
        density :: F
        base    :: B
    end

A `DensityMeasure` is a measure defined by a density with respect to some other
"base" measure 
"""
struct DensityMeasure{F,B} <: AbstractMeasure
    f::F
    base::B
end

function Pretty.tile(Œº::DensityMeasure{F,B}) where {F,B}
    result = Pretty.literal("DensityMeasure ‚à´(")
    result *= Pretty.pair_layout(Pretty.tile(Œº.f), Pretty.tile(Œº.base); sep = ", ")
    result *= Pretty.literal(")")
end

densitymeasure(f, base) = _densitymeasure(f, base, DensityKind(f))

_densitymeasure(f, base, ::IsDensity) = DensityMeasure(f, base)

function _densitymeasure(f, base, _)
    @error """
    The first argument of `DensityMeasure`" must be `::IsDensity`. To pass a
    function, first wrap it in `DensityInterface.funcdensity` or
    `DensityInterface.logfuncdensity`. 
    """
end



basemeasure(Œº::DensityMeasure) = Œº.base

logdensity_def(Œº::DensityMeasure, x) = logdensityof(Œº.f, x)

density_def(Œº::DensityMeasure, x) = densityof(Œº.f, x)


export ‚à´

"""
    ‚à´(f, base::AbstractMeasure)

Define a new measure in terms of a density `f` over some measure `base`.
"""
‚à´(f::Function, base::AbstractMeasure) = DensityMeasure(funcdensity(f), base)

‚à´(f, base::AbstractMeasure) = _densitymeasure(f, base, DensityKind(f))

# ‚à´(Œº::AbstractMeasure, base::AbstractMeasure) = ‚à´(ùíπ(Œº, base), base)

export ‚à´exp

"""
    ‚à´exp(f, base::AbstractMeasure)

Define a new measure in terms of a log-density `f` over some measure `base`.
"""
‚à´exp(f::Function, Œº) = ‚à´(logfuncdensity(f), Œº)

# TODO: `density` and `logdensity` functions for `DensityMeasure`

@inline logdensityof(Œº, x) = _logdensityof(Œº, x)

@inline _logdensityof(Œº, x) = _logdensityof(Œº, basemeasure(Œº, x), x)

@inline function  _logdensityof(Œº, Œ±, x)
    _logdensityof(Œº, Œ±, x, partialstatic(logdensity_def(Œº, x)))
end

@inline function _logdensityof(Œº::M, Œ≤::M, x, ‚Ñì) where {M}
    return ‚Ñì
end

@inline function _logdensityof(Œº::M, Œ≤, x, ‚Ñì) where {M}
    n = static(basemeasure_depth(Œ≤))
    _logdensityof(Œ≤, basemeasure(Œ≤,x), x, ‚Ñì, n)
end

@generated function _logdensityof(Œº, Œ≤, x, ‚Ñì, ::StaticInt{n}) where {n}
    nsteps = max(n, 0)
    quote
        $(Expr(:meta, :inline))
        Base.Cartesian.@nexprs $nsteps i -> begin
            Œî‚Ñì = logdensity_def(Œº, x)
            # @show Œº
            # @show Œî‚Ñì
            # println()
            Œº,Œ≤ = Œ≤, basemeasure(Œ≤, x)
            ‚Ñì += partialstatic(Œî‚Ñì)
        end
        return ‚Ñì
    end
end

@inline function logdensity_rel(Œº::M, ŒΩ::N, x::X) where {M,N,X}
    (‚Ñì‚Çä, Œ±) = _logdensityof(Œº, basemeasure(Œº), x)
    (‚Ñì‚Çã, Œ≤) = _logdensityof(ŒΩ, basemeasure(ŒΩ), x)
    return _logdensity_rel(Œ±, Œ≤, x, ‚Ñì‚Çä - ‚Ñì‚Çã)
end

@inline function _logdensity_rel(Œ±::A, Œ≤::B, x::X, ‚Ñì) where {A,B,X}
    if static_hasmethod(logdensity_def, Tuple{A,B,X})
        return ‚Ñì + logdensity_def(Œ±, Œ≤, x)
    elseif static_hasmethod(logdensity_def, Tuple{B,A,X})
        return ‚Ñì + logdensity_def(Œ≤, Œ±, x)
    else
        @warn """
        No method 
        logdensity(::$A, ::$B, ::$X)
        """
        return oftype(‚Ñì, NaN)
    end
end

# logdensity_def(::Lebesgue{‚Ñù}, ::Lebesgue{‚Ñù}, x) = zero(x)

export densityof
export logdensityof

export density_def

density_def(Œº, ŒΩ::AbstractMeasure, x) = exp(logdensity_def(Œº, ŒΩ, x))
density_def(Œº, x) = exp(logdensity_def(Œº, x))

"""
    rebase(Œº, ŒΩ)

Express `Œº` in terms of a density over `ŒΩ`. Satisfies
```
basemeasure(rebase(Œº, ŒΩ)) == ŒΩ
density(rebase(Œº, ŒΩ)) == ùíπ(Œº,ŒΩ)
``` 
"""
rebase(Œº, ŒΩ) = ‚à´(ùíπ(Œº,ŒΩ), ŒΩ)